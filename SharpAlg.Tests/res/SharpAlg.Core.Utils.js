/*Generated by SharpKit 5 v5.01.1000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var SharpAlg$Native$FunctionalExtensions =
{
    fullname: "SharpAlg.Native.FunctionalExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            SharpAlg.Native.FunctionalExtensions.STR_InputSequencesHaveDifferentLength = "Input sequences have different length.";
        },
        Map$2: function (TIn1, TIn2, action, input1, input2)
        {
            var enumerator1 = input1.GetEnumerator();
            var enumerator2 = input2.GetEnumerator();
            while (enumerator1.MoveNext())
            {
                if (!enumerator2.MoveNext())
                    throw $CreateException(new System.ArgumentException.ctor$$String("Input sequences have different length."), new Error());
                action(enumerator1.get_Current(), enumerator2.get_Current());
            }
            if (enumerator2.MoveNext())
                throw $CreateException(new System.ArgumentException.ctor$$String("Input sequences have different length."), new Error());
        },
        EnumerableEqual$1: function (T, first, second, comparer)
        {
            var en1 = first.GetEnumerator();
            var en2 = second.GetEnumerator();
            while (en1.MoveNext())
            {
                if (!en2.MoveNext())
                    return false;
                if (!comparer(en1.get_Current(), en2.get_Current()))
                    return false;
            }
            return !en2.MoveNext();
        },
        SetEqual$1: function (T, first, second, comparer)
        {
            var list = System.Linq.Enumerable.ToList$1(T, second);
            var $it1 = first.GetEnumerator();
            while ($it1.MoveNext())
            {
                var item = $it1.get_Current();
                var found = false;
                var $it2 = list.GetEnumerator();
                while ($it2.MoveNext())
                {
                    var item2 = $it2.get_Current();
                    if (comparer(item, item2))
                    {
                        list.Remove(item2);
                        found = true;
                        break;
                    }
                }
                if (found == false)
                    return false;
            }
            return list.get_Count() == 0;
        },
        RemoveAt$1: function (T, source, index)
        {
            var $yield = [];
            var en = source.GetEnumerator();
            while (en.MoveNext())
            {
                if (index != 0)
                    $yield.push(en.get_Current());
                index--;
            }
            if (index > 0)
                throw $CreateException(new System.IndexOutOfRangeException.ctor$$String("index"), new Error());
            return $yield;
        },
        Accumulate$1: function (T, source, init, next)
        {
            var enumerator = source.GetEnumerator();
            if (enumerator.MoveNext())
                init(enumerator.get_Current());
            else
                throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
            while (enumerator.MoveNext())
            {
                next(enumerator.get_Current());
            }
        },
        ForEach$1: function (T, source, action)
        {
            var enumerator = source.GetEnumerator();
            while (enumerator.MoveNext())
            {
                action(enumerator.get_Current());
            }
        },
        Tail$1: function (T, source)
        {
            return System.Linq.Enumerable.Skip$1(T, source, 1);
        },
        TryGetValue$2: function (TKey, TVal, source, key)
        {
            var result;
            if ((function ()
            {
                result = {Value: result};
                var $res = source.TryGetValue(key, result);
                result = result.Value;
                return $res;
            })())
                return result;
            return null;
        },
        ConvertAs$1: function (TOut, source)
        {
            return As(source, TOut);
        },
        ConvertCast$1: function (TOut, source)
        {
            return Cast(source, TOut);
        },
        AsEnumerable$1: function (T, source)
        {
            var $yield = [];
            $yield.push(source);
            return $yield;
        },
        Combine$1: function (T, first, next)
        {
            var $yield = [];
            $yield.push(first);
            $yield.push(next);
            return $yield;
        }
    },
    assemblyName: "SharpAlg.Core",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Native$FunctionalExtensions);
if (typeof(SharpAlg) == "undefined")
    var SharpAlg = {};
if (typeof(SharpAlg.Native) == "undefined")
    SharpAlg.Native = {};
SharpAlg.Native.MayBe = function ()
{
};
SharpAlg.Native.MayBe.With = function (input, evaluator)
{
    if (input == null)
        return null;
    return evaluator(input);
};
SharpAlg.Native.MayBe.Return = function (input, evaluator, fallback)
{
    if (!input.get_HasValue())
        return fallback != null ? fallback() : Default(TR);
    return evaluator(input.get_Value());
};
SharpAlg.Native.MayBe.Return = function (input, evaluator, fallback)
{
    if (input == null)
        return fallback != null ? fallback() : Default(TR);
    return evaluator(input);
};
SharpAlg.Native.MayBe.ReturnSuccess = function (input)
{
    return input != null;
};
SharpAlg.Native.MayBe.If = function (input, evaluator)
{
    if (input == null)
        return null;
    return evaluator(input) ? input : null;
};
SharpAlg.Native.MayBe.Do = function (input, action)
{
    if (input == null)
        return null;
    action(input);
    return input;
};
SharpAlg.Native.PlatformHelper = function ()
{
};
SharpAlg.Native.PlatformHelper.ToInvariantString = function (d)
{
    return d.toString();
};
SharpAlg.Native.PlatformHelper.Parse = function (s)
{
    return System.Double.Parse$$String(s);
};
SharpAlg.Native.PlatformHelper.IntToChar = function (n)
{
    return String.fromCharCode(n);
};
SharpAlg.Native.PlatformHelper.CharToInt = function (c)
{
    return c.charCodeAt();
};
SharpAlg.Native.PlatformHelper.GetMessage = function (e)
{
    return e.toString();
};
var SharpAlg$Native$Tuple$2 =
{
    fullname: "SharpAlg.Native.Tuple$2",
    baseTypeName: "System.Object",
    assemblyName: "SharpAlg.Core",
    Kind: "Class",
    definition:
    {
        ctor: function (T1, T2, item1, item2)
        {
            this.T1 = T1;
            this.T2 = T2;
            this.item1 = null;
            this.item2 = null;
            System.Object.ctor.call(this);
            this.item1 = item1;
            this.item2 = item2;
        },
        Item1$$: "`0",
        get_Item1: function ()
        {
            return this.item1;
        },
        Item2$$: "`1",
        get_Item2: function ()
        {
            return this.item2;
        },
        Equals$$Object: function (obj)
        {
            return this.Equals$$Object$$IEqualityComparer(obj, System.Collections.Generic.EqualityComparer$1.get_Default());
        },
        GetHashCode: function ()
        {
            return this.GetHashCode$$IEqualityComparer(System.Collections.Generic.EqualityComparer$1.get_Default());
        },
        Equals$$Object$$IEqualityComparer: function (other, comparer)
        {
            if (other == null)
            {
                return false;
            }
            var tuple = As(other, SharpAlg.Native.Tuple$2.ctor);
            if (tuple == null)
            {
                return false;
            }
            return (comparer.Equals$$Object$$Object(this.item1, tuple.item1) && comparer.Equals$$Object$$Object(this.item2, tuple.item2));
        },
        GetHashCode$$IEqualityComparer: function (comparer)
        {
            return comparer.GetHashCode$$Object(this.item1) ^ comparer.GetHashCode$$Object(this.item2);
        },
        toString: function ()
        {
            var sb = new System.Text.StringBuilder.ctor();
            sb.Append$$Object(this.item1);
            sb.Append$$String(", ");
            sb.Append$$Object(this.item2);
            sb.Append$$String(")");
            return sb.toString();
        }
    }
};
JsTypes.push(SharpAlg$Native$Tuple$2);
