/*Generated by SharpKit 5 v5.01.1000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var SharpAlg$Tests$DiffTests =
{
    fullname: "SharpAlg.Tests.DiffTests",
    baseTypeName: "System.Object",
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        DiffEvaluateTest: function ()
        {
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("13", null), null), [0, 1, 2], [0, 0, 0]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x", null), null), [0, 1, 2], [1, 1, 1]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x + x", null), null), [0, 1, 2], [2, 2, 2]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x + 1", null), null), [0, 1, 2], [1, 1, 1]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x + 1 + x", null), null), [0, 1, 2], [2, 2, 2]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x * x - x", null), null), [0, 1, 2], [-1, 1, 3]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x * x", null), null), [0, 1, 2], [0, 2, 4]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("2 * x * x * x + x", null), null), [0, 1, 2], [1, 7, 25]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1) * (x + 2)", null), null), [0, 1, 2], [3, 5, 7]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("(x * x) / x", null), null), [1, 2, 3], [1, 1, 1]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("36 / x", null), null), [1, 2, 3], [-36, -9, -4]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("36 / (x * x + x)", null), null), [1, 2], [-27, -5]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("27 * (x * x + 1) / (x * x * x + 1)", null), null), [1, 2], [-13.5, -8]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("(x * x) ^ 3", null), null), [0, 1, 2], [0, 6, 192]);
            SharpAlg.Tests.ExprTestHelper.AssertEvaluatedValues(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("(x * x) ^ (1 + 2)", null), null), [0, 1, 2], [0, 6, 192]);
        },
        DiffSimplifyTest: function ()
        {
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("1 + x", null), null), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x + 1", null), null), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x + x", null), null), "2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x + x + x", null), null), "3");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x * 2", null), null), "2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("2 * x", null), null), "2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x * x + 1", null), null), "2 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("1 + x * x + 1", null), null), "2 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("1 / x", null), null), "-x ^ (-2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x / x", null), null), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("(x * x) / x", null), null), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("2 ^ 3", null), null), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("(x + x) ^ 1", null), null), "2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x ^ 2", null), null), "2 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("(x * x) ^ 3", null), null), "6 * x ^ 5");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("2 ^ x", null), null), "2 ^ x * ln(2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x ^ x", null), null), "x ^ x * (ln(x) + 1)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("diff(x ^ 3)", null), "3 * x ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("diff(x ^ 3 * y ^ 2, x)", null), "3 * x ^ 2 * y ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("diff(x ^ 3 * y ^ 2, x, y)", null), "6 * x ^ 2 * y");
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(SharpAlg.Tests.ExprTestHelper.GetParser("diff(x ^ 3 * y ^ 2)"), "Expression contains more than one independent variable\r\n");
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(SharpAlg.Tests.ExprTestHelper.GetParser("diff(x ^ 3, x + 1)"), "All diff arguments should be parameters\r\n");
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(SharpAlg.Native.ExpressionExtensions.ParseCore("diff(x ^ 3, x)", SharpAlg.Native.Builder.ExprBuilderFactory.Create(SharpAlg.Native.ContextFactory.CreateDefault().Register$$String$$Expr("x", SharpAlg.Native.ExpressionExtensions.Parse("y + 1", null)))), "All diff arguments should be parameters\r\n");
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Tests.ParserTestHelper.ParseNoConvolution("diff(x ^ 3)"), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, SharpAlg.Native.ContextFactory.CreateDefault().Register$$String$$Expr("x", SharpAlg.Native.ExpressionExtensions.Parse("2", null)));
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Double(12));
        },
        DiffMultiParametersTest: function ()
        {
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x", null), "y"), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x + y", null), "y"), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x * y", null), "y"), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x * y", null), "x"), "y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x^2 * y^3", null), "x"), "2 * x * y ^ 3");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("x^2 * y^3", null), "y"), "3 * x ^ 2 * y ^ 2");
            SharpAlg.Tests.FluentAssert.Fails$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("x + y", null), $CreateAnonymousDelegate(this, function (x)
            {
                SharpAlg.Native.ExpressionExtensions.Diff(x, null);
            }), Typeof(SharpAlg.Native.ExpressionDefferentiationException.ctor), null);
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("(x ^ 2 + x * y) ^ (x ^ 2)", null), "x"), "(x ^ 2 + x * y) ^ (x ^ 2) * (2 * x * ln(x ^ 2 + x * y) + x ^ 2 * (2 * x + y) / (x ^ 2 + x * y))");
            SharpAlg.Tests.FluentAssert.Fails$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("ln(x, x)", SharpAlg.Native.Builder.ExprBuilderFactory.CreateEmpty()), $CreateAnonymousDelegate(this, function (x)
            {
                SharpAlg.Native.ExpressionExtensions.Diff(x, null);
            }), Typeof(SharpAlg.Native.InvalidArgumentCountException.ctor), null);
        }
    }
};
JsTypes.push(SharpAlg$Tests$DiffTests);
var SharpAlg$Tests$ExprTests =
{
    fullname: "SharpAlg.Tests.ExprTests",
    baseTypeName: "System.Object",
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        ContextTest: function ()
        {
            var context = SharpAlg.Native.ContextFactory.CreateEmpty();
            var func = new SharpAlg.Tests.ExprTests.CustomFunction.ctor();
            SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Context.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Context.ctor, SharpAlg.Native.ContextFactory.CreateEmpty().Register$$Function(func).Register$$String$$Expr("x", SharpAlg.Native.ExpressionExtensions.Parse("3", null)), $CreateAnonymousDelegate(this, function (x)
            {
                return x.GetFunction("CustomFunc");
            }), func), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x.GetValue("x"), SharpAlg.Native.ExpressionExtensions.Parse("3", null));
            }));
            SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Context.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Context.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Context.ctor, SharpAlg.Native.ContextFactory.CreateDefault().Register$$Function(func).Register$$String$$Expr("x", SharpAlg.Native.ExpressionExtensions.Parse("3", null)), $CreateAnonymousDelegate(this, function (x)
            {
                return x.GetFunction(SharpAlg.Native.Functions.get_Factorial().get_Name());
            }), SharpAlg.Native.Functions.get_Factorial()), $CreateAnonymousDelegate(this, function (x)
            {
                return x.GetFunction("CustomFunc");
            }), func), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x.GetValue("x"), SharpAlg.Native.ExpressionExtensions.Parse("3", null));
            }));
            SharpAlg.Tests.FluentAssert.Fails$1(SharpAlg.Native.Context.ctor, SharpAlg.Tests.FluentAssert.Fails$1(SharpAlg.Native.Context.ctor, SharpAlg.Native.ContextFactory.Default, $CreateAnonymousDelegate(this, function (x)
            {
                x.Register$$Function(func);
            }), Typeof(System.InvalidOperationException.ctor), null), $CreateAnonymousDelegate(this, function (x)
            {
                x.Register$$String$$Expr("x", SharpAlg.Native.ExpressionExtensions.Parse("3", null));
            }), Typeof(System.InvalidOperationException.ctor), null);
            SharpAlg.Tests.FluentAssert.Fails$1(SharpAlg.Native.Context.ctor, SharpAlg.Tests.FluentAssert.Fails$1(SharpAlg.Native.Context.ctor, SharpAlg.Native.ContextFactory.Empty, $CreateAnonymousDelegate(this, function (x)
            {
                x.Register$$Function(func);
            }), Typeof(System.InvalidOperationException.ctor), null), $CreateAnonymousDelegate(this, function (x)
            {
                x.Register$$String$$Expr("x", SharpAlg.Native.ExpressionExtensions.Parse("3", null));
            }), Typeof(System.InvalidOperationException.ctor), null);
        },
        ParameterExprTest: function ()
        {
            SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.ParameterExpr.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.ParameterExpr.ctor, SharpAlg.Tests.FluentAssert.Fails$1(SharpAlg.Native.ParameterExpr.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.ParameterExpr.ctor, SharpAlg.Native.Expr.Parameter("x"), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_ParameterName();
            }), "x"), $CreateAnonymousDelegate(this, function (x)
            {
                SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), Typeof(SharpAlg.Native.ExpressionEvaluationException.ctor), $CreateAnonymousDelegate(this, function (e)
            {
                SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(System.Exception.ctor, e, $CreateAnonymousDelegate(this, function (x)
                {
                    return x.get_Message();
                }), "x value is undefined");
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Native.Expr.Parameter("x"));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Native.Expr.Parameter("y"));
            }));
        },
        FunctionExprTest: function ()
        {
            SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.FunctionExpr.ctor, SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Tests.ExprTestHelper.AsConstant(3)), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_FunctionName();
            }), "ln"), "ln(3)"), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Tests.ExprTestHelper.AsConstant(3)));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Tests.ExprTestHelper.AsConstant(4)));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Native.Expr.Function$$String$$Expr("sin", SharpAlg.Tests.ExprTestHelper.AsConstant(3)));
            }));
            SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("y"))), "ln(x * y)"), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("y"))));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("y"), SharpAlg.Native.Expr.Parameter("x"))));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquivalent(x, SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("y"))));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquivalent(x, SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("y"), SharpAlg.Native.Expr.Parameter("x"))));
            }));
            SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.FunctionExpr.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.FunctionExpr.ctor, SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.FunctionExpr.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.FunctionExpr.ctor, SharpAlg.Native.Expr.Function$$String$$IEnumerable$1$Expr("someFunc", [SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("y")]), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Native.Expr.Function$$String$$IEnumerable$1$Expr("someFunc", [SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("y")]));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Native.Expr.Function$$String$$IEnumerable$1$Expr("someFunc", [SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("z")]));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquivalent(x, SharpAlg.Native.Expr.Function$$String$$IEnumerable$1$Expr("someFunc", [SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("y")]));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquivalent(x, SharpAlg.Native.Expr.Function$$String$$IEnumerable$1$Expr("someFunc", [SharpAlg.Native.Expr.Parameter("y"), SharpAlg.Native.Expr.Parameter("x")]));
            }));
        },
        ConstantExprTest: function ()
        {
            SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.ConstantExpr.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.ConstantExpr.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.ConstantExpr.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.ConstantExpr.ctor, SharpAlg.Tests.ExprTestHelper.AsConstant(9), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_Value();
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(9)), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(9)), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Tests.ExprTestHelper.AsConstant(9));
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, SharpAlg.Tests.ExprTestHelper.AsConstant(13));
            }));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("5 - 5", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("3 - 2", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("2 * 2 - 2", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("1 - 2", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("0", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("1", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("2", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("-2", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("-3", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("24539485093485348358904704", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("6 / 6", null));
            SharpAlg.Tests.ExprTestHelper.AssertIsFraction(SharpAlg.Native.ExpressionExtensions.Parse("5 / 6", null));
        },
        BinaryExprTest: function ()
        {
            var left = SharpAlg.Tests.ExprTestHelper.AsConstant(9);
            var right = SharpAlg.Native.Expr.Parameter("x");
            var expr = Cast(SharpAlg.Native.Expr.Divide(left, right), SharpAlg.Native.MultiplyExpr.ctor);
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.PowerExpr.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.PowerExpr.ctor, SharpAlg.Native.MayBe.With(SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.MultiplyExpr.ctor, expr, $CreateAnonymousDelegate(this, function (x)
            {
                return System.Linq.Enumerable.ElementAt$1(SharpAlg.Native.Expr.ctor, x.get_Args(), 0);
            }), left), $CreateAnonymousDelegate(this, function (x)
            {
                return As(System.Linq.Enumerable.ElementAt$1(SharpAlg.Native.Expr.ctor, x.get_Args(), 1), SharpAlg.Native.PowerExpr.ctor);
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_Left();
            }), right), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_Right();
            }), SharpAlg.Native.Expr.MinusOne);
            var expr2 = SharpAlg.Native.Expr.Divide(left, right);
            var expr3 = SharpAlg.Native.Expr.Divide(right, left);
            var expr4 = SharpAlg.Native.Expr.Add$$Expr$$Expr(left, right);
            var expr5 = SharpAlg.Native.Expr.Power(left, right);
            SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.MultiplyExpr.ctor, SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.MultiplyExpr.ctor, SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.MultiplyExpr.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.MultiplyExpr.ctor, expr, $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, expr2);
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, expr3);
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, expr4);
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x, expr5);
            }));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Tests.ExprTestHelper.AsConstant(13)), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(22));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Native.Expr.Subtract(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Tests.ExprTestHelper.AsConstant(13)), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(-4));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Native.Expr.Divide(SharpAlg.Tests.ExprTestHelper.AsConstant(10), SharpAlg.Tests.ExprTestHelper.AsConstant(5)), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(2));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Tests.ExprTestHelper.AsConstant(13)), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(117));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.PowerExpr.ctor, SharpAlg.Native.Expr.Power(SharpAlg.Tests.ExprTestHelper.AsConstant(2), SharpAlg.Tests.ExprTestHelper.AsConstant(3)), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(8));
        },
        ParameterExprEvaluationTest: function ()
        {
            var context = SharpAlg.Native.ContextFactory.CreateDefault().Register$$String$$Expr("x", SharpAlg.Tests.ExprTestHelper.AsConstant(9)).Register$$String$$Expr("y", SharpAlg.Tests.ExprTestHelper.AsConstant(13));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.ParameterExpr.ctor, SharpAlg.Native.Expr.Parameter("x"), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, context);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(9));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.ParameterExpr.ctor, SharpAlg.Native.Expr.Parameter("y"), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, context);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(13));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("y")), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, context);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(22));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("(y - x)!", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, context);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(24));
            context.Register$$String$$Expr("y", SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("x")));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("y")), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, context);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Int32(90));
        },
        FunctionEvaluationTest: function ()
        {
            var context = SharpAlg.Native.ContextFactory.CreateEmpty().Register$$Function(new SharpAlg.Tests.ExprTests.CustomFunction.ctor()).Register$$String$$Expr("x", SharpAlg.Native.ExpressionExtensions.Parse("3", null));
            SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("CustomFunc(1, x + 2, 2)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, context);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Double(30));
            SharpAlg.Tests.FluentAssert.Fails$1(SharpAlg.Native.FunctionExpr.ctor, SharpAlg.Native.Expr.Function$$String$$IEnumerable$1$Expr("ln", [SharpAlg.Native.ExpressionExtensions.Parse("1", null), SharpAlg.Native.ExpressionExtensions.Parse("2", null)]), $CreateAnonymousDelegate(this, function (x)
            {
                SharpAlg.Native.ExpressionExtensions.Diff(x, null);
            }), Typeof(SharpAlg.Native.InvalidArgumentCountException.ctor), null);
        },
        SemanticErrorsTest: function ()
        {
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(SharpAlg.Tests.ExprTestHelper.GetParser("ln"), "Error, (in ln) expecting 1 argument, got 0\r\n");
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(SharpAlg.Tests.ExprTestHelper.GetParser("ln()"), "Error, (in ln) expecting 1 argument, got 0\r\n");
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(SharpAlg.Tests.ExprTestHelper.GetParser("ln(3, x)"), "Error, (in ln) expecting 1 argument, got 2\r\n");
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(SharpAlg.Tests.ExprTestHelper.GetParser("factorial(3, x, 1)"), "Error, (in factorial) expecting 1 argument, got 3\r\n");
        },
        ToStringTest: function ()
        {
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("9", null), "9");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-9", null), "-9");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x", null), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-x", null), "-x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("9 + x", null), "9 + x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(9 - x)", null), "9 - x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ParserTestHelper.ParseNoConvolution("-(9 - x)"), "-(9 - x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(9 * x)", null), "9 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(9 / x)", null), "9 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x + y * z", null), "x + y * z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + y) * z", null), "(x + y) * z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("z * (x + y)", null), "z * (x + y)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x ^ y", null), "x ^ y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * z ^ y", null), "x * z ^ y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x + y + z", null), "x + y + z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x - y - z", null), "x - y - z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x / y / z", null), "x / y / z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 + 2 * x + 3 * y", null), "1 + 2 * x + 3 * y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1) ^ (x * y)", null), "(x + 1) ^ (x * y)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x - 0.05) ^ (x * .2 * y)", null), "(x - 0.05) ^ (0.2 * x * y)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Parameter("x")), "-x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Inverse(SharpAlg.Native.Expr.Parameter("x")), "1 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Parameter("x"))), "9 - x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Native.Expr.Inverse(SharpAlg.Native.Expr.Parameter("x"))), "9 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Parameter("x")))), "9 - (-x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Native.Expr.Inverse(SharpAlg.Native.Expr.Inverse(SharpAlg.Native.Expr.Parameter("x")))), "9 / (1 / x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Native.Expr.Inverse(SharpAlg.Native.Expr.Parameter("x"))), "9 + 1 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Parameter("x"))), "9 * (-x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Inverse(SharpAlg.Native.Expr.Parameter("x")))), "9 - 1 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Native.Expr.Inverse(SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Parameter("x")))), "9 / (-x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Multiply$$IEnumerable$1$Expr([SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Tests.ExprTestHelper.AsConstant(-1)]), "x * (-1)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x ^ y ^ z", null), "(x ^ y) ^ z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(-2) * x", null), "-2 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(-2), SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Tests.ExprTestHelper.AsConstant(1))), "-2 * (x + 1)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-x + y", null), "-x + y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 / (3 + x)", null), "1 / (3 + x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(2 + x) / (3 + x)", null), "(2 + x) / (3 + x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * x / (3 + x)", null), "2 * x / (3 + x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * x / (y * z)", null), "2 * x / y / z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x ^ z / y ^ t", null), "x ^ z / y ^ t");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 / 3 ^ x", null), "1 / 3 ^ x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 / (4 * x)", null), "1/4 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("t * (-x)", null), "-t * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("t * (-2) * x", null), "-2 * t * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("z + t * (-x)", null), "z - t * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("z + t * (-2) * x", null), "z - 2 * t * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(- x * t) ^ z", null), "(-x * t) ^ z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Multiply$$IEnumerable$1$Expr([SharpAlg.Tests.ExprTestHelper.AsConstant(2), SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Power(SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("y"), SharpAlg.Native.Expr.Parameter("z")), SharpAlg.Native.Expr.MinusOne)]), "2 * x / (y * z)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.Expr.Power(SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(3), SharpAlg.Native.Expr.Parameter("x")), SharpAlg.Native.Expr.MinusOne), "1 / (3 * x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("someFunc(x, x + y, x ^ y)", null), "someFunc(x, x + y, x ^ y)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2*x/3*y", null), "2/3 * x * y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2*x/(-3)*y", null), "-2/3 * x * y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2/3 + y", null), "2/3 + y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2/3^2", null), "2/9");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(-4/6)^2", null), "4/9");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(2/3)^x", null), "(2/3) ^ x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(-2/3)^x", null), "(-2/3) ^ x");
        },
        ConvolutionTest: function ()
        {
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("9 + 13", null), "22");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("9 - 13", null), "-4");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("9 * 13", null), "117");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("117 / 9", null), "13");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("117 / 9 - 4", null), "9");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(5 + 5) / 2", null), "5");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 + 1 + x", null), "2 + x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x + 1", null), "x + 1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 + x", null), "1 + x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("0 + x", null), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x + 0", null), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 - 1 + x", null), "1 + x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x - 1", null), "x - 1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 - x", null), "1 - x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("0 - x", null), "-x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x - 0", null), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * 2 * x", null), "4 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * 2", null), "2 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * x", null), "2 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("0 * x", null), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * 0", null), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 * x", null), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * 1", null), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("4 / 2 / x", null), "2 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x / 2", null), "1/2 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 / x", null), "1 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x / 1", null), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("0 / x", null), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x + x", null), "2 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * x + 2 * x", null), "4 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x - x", null), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * x - 2 * x", null), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x / x", null), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("1 + 2 + 3 + 4 + 5", null), "15");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(2 * x) / (2 * x)", null), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * x", null), "x ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1) * (x + 1)", null), "(x + 1) ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1) ^ (2 + 1)", null), "(x + 1) ^ 3");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1) ^ 0", null), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1) ^ (2 - 1)", null), "x + 1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1) ^ (y - y)", null), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 ^ 3", null), "8");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x - x) ^ y", null), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x / x) ^ y", null), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-9 + 13", null), "4");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-(x + 1)", null), "-x - 1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-2 * (x + 1)", null), "-2 * x - 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1) * 2", null), "2 * x + 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("z * (x + 1)", null), "z * (x + 1)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-(x + 1) + (x + 1)", null), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-(x + 1) - (x + 1)", null), "-2 * x - 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-((x + 1) / (x + 1))", null), "-1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x + (1 - 2)", null), "x - 1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * y * x", null), "x ^ 2 * y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x + y + x", null), "2 * x + y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * y * x * y * x", null), "x ^ 3 * y ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * x * x", null), "x ^ 3");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x + x + x", null), "3 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * y + 3 * y", null), "5 * y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * y + y", null), "3 * y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("y + x + y + 2 * x + y + 3 * x", null), "3 * y + 6 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x + 1 + y - 2", null), "x - 1 + y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("y * x + 2 * y * x", null), "3 * y * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * y - 3 * y", null), "-y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("2 * ((x + 1) / (x + 1))", null), "2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-(x + 1) / (x + 1)", null), "-1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x ^ 2) ^ 3 + x ^ 2 ^ y + x ^ y ^ 2 + x ^ y ^ z", null), "x ^ 6 + (x ^ 2) ^ y + (x ^ y) ^ 2 + (x ^ y) ^ z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * 14  + 2 * x * 2 + x - 5 * x + x * (-1)", null), "13 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * 14 * y  + 2 * x * y + x * y * 3 - 5 * x *y - x * (-2) * y + 2 * x * (-3) * y", null), "10 * x * y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("y * z * x + x * y * z + 2 * z * x * y - z * y * (-2) * x", null), "6 * y * z * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1) ^ 2 * (x + 1) ^ 3", null), "(x + 1) ^ 5");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + 1 - y) ^ 2 * (-y + 1 + x) ^ 3", null), "(x + 1 - y) ^ 5");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x + y) ^ 2 * (x * y) ^ 3", null), "(x + y) ^ 2 * x ^ 3 * y ^ 3");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x * y + 1) ^ 2 * (1 + y * x) ^ 3", null), "(x * y + 1) ^ 5");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("y ^ 2 * x + 3 * x * y ^ 2", null), "4 * y ^ 2 * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x / y  / z + 3 * x / z / y", null), "4 * x / y / z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x ^ (z * y) + x ^ (y * z)", null), "2 * x ^ (z * y)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(t * x) ^ (z * y) + (x * t) ^ (y * z)", null), "2 * (t * x) ^ (z * y)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("t * 2 * y", null), "2 * t * y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-x + y", null), "-x + y");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("t * (-x)", null), "-t * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("z + t * (-x)", null), "z - t * x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(t * (-x)) ^ (z * y) + (x * (-t)) ^ (y * z)", null), "2 * (-t * x) ^ (z * y)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x * y) ^ 3 * (x * y) ^ 2", null), "x ^ 5 * y ^ 5");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x * y) ^ 3 * (x ^ 2 * y) ^ 2", null), "x ^ 7 * y ^ 5");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x * y) * (x * y) ^ 2", null), "x ^ 3 * y ^ 3");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x * y) ^ 2 * (x * y) ^ 2", null), "x ^ 4 * y ^ 4");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x * y) ^ z", null), "(x * y) ^ z");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(x * y) ^ z * (y * x) ^ t", null), "(x * y) ^ (z + t)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(2 / 3)^(2^6/2^(5 - 0))/(36/24)", null), "8/27");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(2 / 3 / x)^2", null), "4/9 * x ^ (-2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(2 / 3) * (9 / 4)", null), "3/2");
            SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("2 / 3.0", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "0.666666");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("2 ^ (1/2)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "1.414213"), "2 ^ (1/2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(2 ^ (2/3)) ^ (3/4)", null), "2 ^ (1/2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(4 * x) ^ 2", null), "16 * x ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("((-1/4) *R)^(1/2)", null), "(-1/4 * R) ^ (1/2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("1 ^ (1/2)", null)), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.AssertIsFloat(SharpAlg.Native.ExpressionExtensions.Parse("1.0 ^ (1/2)", null)), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("4 ^ (1/2)", null), "4 ^ (1/2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.AssertIsFloat(SharpAlg.Native.ExpressionExtensions.Parse("4.0 ^ (1/2)", null)), "2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.AssertIsFloat(SharpAlg.Native.ExpressionExtensions.Parse("1.0 - 1", null)), "0");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("-x ^ 2", null), "-x ^ 2");
        },
        SubsitutionTest: function ()
        {
            var context = SharpAlg.Native.ContextFactory.CreateDefault().Register$$String$$Expr("x", SharpAlg.Native.ExpressionExtensions.Parse("y + 1", null));
            var builder = SharpAlg.Native.Builder.ExprBuilderFactory.Create(context);
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x ^ 3", builder), "(y + 1) ^ 3");
        }
    }
};
JsTypes.push(SharpAlg$Tests$ExprTests);
var SharpAlg$Tests$ExprTests$CustomFunction =
{
    fullname: "SharpAlg.Tests.ExprTests.CustomFunction",
    baseTypeName: "SharpAlg.Native.Function",
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            SharpAlg.Native.Function.ctor.call(this, "CustomFunc");
        },
        Evaluate: function (evaluator, args)
        {
            var result = System.Linq.Enumerable.Aggregate$2$$IEnumerable$1$$TAccumulate$$Func$3(SharpAlg.Native.Number.ctor, SharpAlg.Native.Number.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(SharpAlg.Native.Expr.ctor, SharpAlg.Native.Number.ctor, args, $CreateAnonymousDelegate(this, function (x)
            {
                return x.Visit$1(SharpAlg.Native.Number.ctor, evaluator);
            })), SharpAlg.Native.NumberFactory.Zero, $CreateAnonymousDelegate(this, function (res, x)
            {
                return SharpAlg.Native.Number.op_Addition(res, SharpAlg.Native.Number.op_Multiply(x, x));
            }));
            return result;
        }
    }
};
JsTypes.push(SharpAlg$Tests$ExprTests$CustomFunction);
var SharpAlg$Tests$ExprTestHelper =
{
    fullname: "SharpAlg.Tests.ExprTestHelper",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GetParser: function (expression)
        {
            return SharpAlg.Native.ExpressionExtensions.ParseCore(expression, SharpAlg.Native.Builder.ExprBuilderFactory.CreateDefault());
        },
        AssertSimpleStringRepresentation: function (expr, value)
        {
            return SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, expr, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Print(x, null);
            }, value);
        },
        AssertIsInteger: function (expr)
        {
            return SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, expr, function (x)
            {
                return SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.ConstantExpr.ctor, x).get_Value().get_IsInteger();
            });
        },
        AssertIsFraction: function (expr)
        {
            return SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, expr, function (x)
            {
                return SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.ConstantExpr.ctor, x).get_Value().get_IsFraction();
            });
        },
        AssertIsFloat: function (expr)
        {
            return SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Expr.ctor, expr, function (x)
            {
                return SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.ConstantExpr.ctor, x).get_Value().get_IsFloat();
            });
        },
        AssertEvaluatedValues: function (expr, input, expected)
        {
            var evaluator = SharpAlg.Tests.ExprTestHelper.AsEvaluator(expr);
            SharpAlg.Tests.FluentAssert.IsSequenceEqual$1(SharpAlg.Native.Number.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.Double.ctor, SharpAlg.Native.Number.ctor, input, function (x)
            {
                return evaluator(x);
            }), System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.Double.ctor, SharpAlg.Native.Number.ctor, expected, function (x)
            {
                return SharpAlg.Tests.ExprTestHelper.AsNumber$$Double(x);
            }));
            return expr;
        },
        AsEvaluator: function (expr)
        {
            return function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(expr, SharpAlg.Native.ContextFactory.CreateEmpty().Register$$String$$Expr("x", SharpAlg.Tests.ExprTestHelper.AsConstant(x)));
            };
        },
        AsConstant: function (constant)
        {
            return SharpAlg.Native.Expr.Constant(SharpAlg.Tests.ExprTestHelper.AsNumber$$Double(constant));
        },
        AsNumber$$Double: function (constant)
        {
            return SharpAlg.Native.NumberFactory.FromString(SharpAlg.Native.PlatformHelper.ToInvariantString(constant));
        },
        AsNumber$$Int32: function (constant)
        {
            return SharpAlg.Native.NumberFactory.FromString(SharpAlg.Native.PlatformHelper.ToInvariantString(constant));
        },
        AsNumber$$Int64: function (constant)
        {
            return SharpAlg.Native.NumberFactory.FromString(SharpAlg.Native.PlatformHelper.ToInvariantString(constant));
        },
        IsFloatEqual$1: function (TInput, obj, valueEvaluator, expected)
        {
            return SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(TInput, obj, function (x)
            {
                var res = valueEvaluator(x).toString();
                var floatSignCount = expected.length - expected.indexOf(".");
                res = res.substr(0, res.indexOf(".") + floatSignCount);
                return res;
            }, expected);
        }
    },
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Tests$ExprTestHelper);
var SharpAlg$Tests$FluentAssert =
{
    fullname: "SharpAlg.Tests.FluentAssert",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        IsNull$1: function (TInput, obj, valueEvaluator)
        {
            NUnit.Framework.Assert.IsNull$$Object(SharpAlg.Tests.FluentAssert.GetActualValue$1(TInput, obj, valueEvaluator));
            return obj;
        },
        IsNotNull$1: function (TInput, obj, valueEvaluator)
        {
            NUnit.Framework.Assert.IsNotNull$$Object(SharpAlg.Tests.FluentAssert.GetActualValue$1(TInput, obj, valueEvaluator));
            return obj;
        },
        IsEqual$1$$TInput$$Object: function (TInput, obj, expectedValue)
        {
            SharpAlg.Tests.FluentAssert.AreEqual(expectedValue, obj);
            return obj;
        },
        IsEqual$1$$TInput$$Func$2$$Object: function (TInput, obj, valueEvaluator, expectedValue)
        {
            SharpAlg.Tests.FluentAssert.AreEqual(expectedValue, valueEvaluator(obj));
            return obj;
        },
        IsNotEqual$1$$TInput$$Object: function (TInput, obj, expectedValue)
        {
            NUnit.Framework.Assert.AreNotEqual$$Object$$Object(expectedValue, obj);
            return obj;
        },
        IsNotEqual$1$$TInput$$Func$2$$Object: function (TInput, obj, valueEvaluator, expectedValue)
        {
            NUnit.Framework.Assert.AreNotEqual$$Object$$Object(expectedValue, valueEvaluator(obj));
            return obj;
        },
        IsTrue$1$$TInput$$Func$2: function (TInput, obj, valueEvaluator)
        {
            SharpAlg.Tests.FluentAssert.AreEqual(true, valueEvaluator(obj));
            return obj;
        },
        IsFalse$1$$TInput$$Func$2: function (TInput, obj, valueEvaluator)
        {
            SharpAlg.Tests.FluentAssert.AreEqual(false, valueEvaluator(obj));
            return obj;
        },
        IsTrue$$Boolean: function (val)
        {
            SharpAlg.Tests.FluentAssert.AreEqual(true, val);
            return val;
        },
        IsFalse$$Boolean: function (val)
        {
            SharpAlg.Tests.FluentAssert.AreEqual(false, val);
            return val;
        },
        GetActualValue$1: function (TInput, obj, valueEvaluator)
        {
            return valueEvaluator == null ? obj : valueEvaluator(obj);
        },
        IsSequenceEqual$1: function (T, first, second)
        {
            var assert = function (x, y)
            {
                SharpAlg.Tests.FluentAssert.AreEqual(x, y);
            };
            SharpAlg.Native.FunctionalExtensions.Map$2(T, T, assert, first, second);
            return first;
        },
        Fails$1: function (TInput, obj, action, exceptionType, exceptionCheck)
        {
            try
            {
                action(obj);
            }
            catch (e)
            {
                SharpAlg.Tests.FluentAssert.CheckExceptionType(exceptionType, e);
                if (exceptionCheck != null)
                    exceptionCheck(e);
                return obj;
            }
            throw $CreateException(new NUnit.Framework.AssertionException.ctor$$String("Exception expected"), new Error());
        },
        CheckExceptionType: function (exceptionType, e)
        {
            
        },
        AreEqual: function (expected, actual)
        {
            this.JsAreEqual(expected, actual);
        },
        JsAreEqual: function (expected, actual)
        {
            if (!System.Object.Equals$$Object$$Object(expected, actual))
                throw $CreateException(new SharpAlg.Tests.FluentAssert.JsAssertionException.ctor("Expected: " + expected + " but was: " + actual), new Error());
        }
    },
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Tests$FluentAssert);
var SharpAlg$Tests$FluentAssert$JsAssertionException =
{
    fullname: "SharpAlg.Tests.FluentAssert.JsAssertionException",
    baseTypeName: "System.Exception",
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function (message)
        {
            System.Exception.ctor$$String.call(this, message);
        }
    }
};
JsTypes.push(SharpAlg$Tests$FluentAssert$JsAssertionException);
var SharpAlg$Tests$FunctionsTests =
{
    fullname: "SharpAlg.Tests.FunctionsTests",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            SharpAlg.Tests.FunctionsTests.STR_PiIsAConstantAndCantBeUsedAsFunction = "Pi is a constant and can\'t be used as function\r\n";
        }
    },
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        TrigonometryTest: function ()
        {
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("sin(1)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "0.84147"), "sin(1)");
            SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("sin(1.0)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Print(x, null);
            }), "0.84147");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("sin(x)", null), null), "cos(x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("sin(-x)", null), null), "-cos(-x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("sin(x ^ 2)", null), null), "2 * x * cos(x ^ 2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("sin(-x ^ 2)", null), null), "-2 * x * cos(-x ^ 2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("cos(1)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "0.54030"), "cos(1)");
            SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("cos(1.0)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Print(x, null);
            }), "0.54030");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("cos(x)", null), null), "-sin(x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("cos(-x)", null), null), "sin(-x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("cos(x ^ 2)", null), null), "-2 * x * sin(x ^ 2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("cos(-x ^ 2)", null), null), "2 * x * sin(-x ^ 2)");
        },
        PiTest: function ()
        {
            SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("Pi", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "3.14159");
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(SharpAlg.Tests.ExprTestHelper.GetParser("Pi()"), "Pi is a constant and can\'t be used as function\r\n");
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(SharpAlg.Tests.ExprTestHelper.GetParser("Pi(1)"), "Pi is a constant and can\'t be used as function\r\n");
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("Pi", null), null), "0"));
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("Pi", null), "Pi");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("Pi + 1.0", null), "Pi + 1");
        },
        ExpTest: function ()
        {
            SharpAlg.Tests.FluentAssert.Fails$1(SharpAlg.Native.FunctionExpr.ctor, SharpAlg.Native.Expr.Function$$String$$IEnumerable$1$Expr("exp", [SharpAlg.Native.ExpressionExtensions.Parse("1", null), SharpAlg.Native.ExpressionExtensions.Parse("2", null)]), $CreateAnonymousDelegate(this, function (x)
            {
                SharpAlg.Native.ExpressionExtensions.Diff(x, null);
            }), Typeof(SharpAlg.Native.InvalidArgumentCountException.ctor), null);
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.AssertIsFloat(SharpAlg.Native.ExpressionExtensions.Parse("exp(0.0)", null)), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Native.ExpressionExtensions.Parse("exp(0)", null)), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "1"), "1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("exp(1) + 1.0", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "3.718281"), "exp(1) + 1");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("exp(2)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "7.389056"), "exp(2)");
            SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("exp(2.0)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Print(x, null);
            }), "7.389056");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("exp(-1)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "0.367879"), "exp(-1)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("exp(-2)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "0.135335"), "exp(-2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(x)", null), "exp(x)"), null), "exp(x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(x^2)", null), "exp(x ^ 2)"), null), "2 * x * exp(x ^ 2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(x!)", null), "exp(x!)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(ln(x))", null), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("ln(exp(x))", null), "x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("ln(exp(x^2))", null), "x ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("ln(x^2)", null), "2 * ln(x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("ln(x^x)", null), "x * ln(x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(2 * ln(x))", null), "x ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(2 * ln(x) ^ 2)", null), "exp(2 * ln(x) ^ 2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(ln(x) * y * 2)", null), "x ^ (2 * y)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(z * ln(y) * ln(x) * 2)", null), "y ^ (2 * z * ln(x))");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(ln(x^2))", null), "x ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("exp(ln(x^x))", null), "x ^ x");
        },
        LnTest: function ()
        {
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("ln(1)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), SharpAlg.Tests.ExprTestHelper.AsNumber$$Double(0)));
            SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("ln(3)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Evaluate(x, null);
            }), "1.098612");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("ln(y * x) + ln(x * y)", null), "2 * ln(y * x)");
            SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Expr.ctor, SharpAlg.Native.ExpressionExtensions.Parse("ln(2.0)", null), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.ExpressionExtensions.Print(x, null);
            }), "0.693147");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("ln(x * x) + ln(x + x)", null), "2 * ln(x) + ln(2 * x)");
            SharpAlg.Tests.ExprTestHelper.AssertIsFloat(SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("ln(1.0)", null), "0"));
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("ln(1)", null), "0"));
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("ln(x)", null), null), "1 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("ln(x ^ 2 + 1)", null), null), "2 * x / (x ^ 2 + 1)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("ln(x ^ 3)", null), null), "3 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Diff(SharpAlg.Native.ExpressionExtensions.Parse("ln(-x ^ 2)", null), null), "2 / x");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * ln(2)", null), "x * ln(2)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("ln(x + y) * ln(x * ln(x)) ^ 2", null), "ln(x + y) * ln(x * ln(x)) ^ 2");
        },
        FactorialTest: function ()
        {
            SharpAlg.Tests.ExprTestHelper.AssertIsInteger(SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("3!", null), "6"));
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("3.5!", null), "3.5!");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x! + factorial(y)", null), "x! + y!");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x * y!", null), "x * y!");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("x ^ (y + z)!", null), "x ^ (y + z)!");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(y ^ z)!", null), "(y ^ z)!");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("y! ^ z!", null), "y! ^ z!");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(y * x)! + (x * y)!", null), "2 * (y * x)!");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("someFunc(x, y * x) + someFunc(x, x * y)", null), "2 * someFunc(x, y * x)");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("someFunc(x, y * x)! + 2 * someFunc(x, x * y)!", null), "3 * someFunc(x, y * x)!");
        }
    }
};
JsTypes.push(SharpAlg$Tests$FunctionsTests);
var SharpAlg$Tests$NumberTests =
{
    fullname: "SharpAlg.Tests.NumberTests",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        RandomLongDivisionCore: function (rnd, maxDivident1, maxDivident2, maxDivisor)
        {
            var x = rnd.Next$$Int32(maxDivident1) * 2147483647 + rnd.Next$$Int32(maxDivident2);
            var y = rnd.Next$$Int32(maxDivisor);
            if (y != 0)
            {
                try
                {
                    SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.IntDivide(x.toString(), y.toString()), (x / y).toString());
                    var gcd = SharpAlg.Tests.NumberTests.GCD(x, y);
                    var x_ = x / gcd;
                    var y_ = y / gcd;
                    if (y_ > 1)
                        SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide(x.toString(), y.toString()), x_.toString() + "/" + y_.toString());
                    else
                        SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide(x.toString(), y.toString()), x_.toString());
                }
                catch (e)
                {
                    System.Diagnostics.Debug.WriteLine$$String(x + "/" + y);
                    throw $CreateException(e, new Error());
                }
            }
        },
        GCD: function (a, b)
        {
            var c;
            while (b > 0)
            {
                c = a % b;
                a = b;
                b = c;
            }
            return a;
        }
    },
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        DoubleOperationsTest: function ()
        {
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Add("1.2", "2.3"), "3.5");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Multiply("9.0", "13.0"), "117");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Subtract("9.0", "13.0"), "-4");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Divide("3.0", "2.0"), "1.5");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Divide("1593668734.0", "1287293.0"), "1238");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Power("117.0", "5.0"), "21924480357");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Add("1000000001.0", "500000001.0"), "1500000002");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Add("-1000000001.0", "500000001.0"), "-500000000");
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Equal("100000000001.0", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Equal("100000000001.0", "100000000000.0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.NotEqual("100000000001.0", "100000000000.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.NotEqual("100000000001.0", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("100000000001.0", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("100000000001.0", "100000000002.0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.LessOrEqual("100000000001.0", "100000000002.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.LessOrEqual("100000000002.0", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("100000000001.0", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("100000000002.0", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.GreaterOrEqual("100000000001.0", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.GreaterOrEqual("100000000001.0", "100000000002.0"));
        },
        IntOperationsTest: function ()
        {
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("1", "2"), "3");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("9", "13"), "-4");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("9", "13"), "117");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("-9", "-13"), "117");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("9", "0"), "0");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("0", "9"), "0");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("9", "-13"), "-117");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("-9", "13"), "-117");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("1593668734", "1287293"), "1238");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("117", "5"), "21924480357");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("1000000001", "500000001"), "1500000002");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("-1000000001", "500000001"), "-500000000");
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Equal("100000000001", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Equal("100000000001", "100000000000"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.NotEqual("100000000001", "100000000000"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.NotEqual("100000000001", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("100000000001", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("100000000001", "100000000002"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.LessOrEqual("100000000001", "100000000002"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.LessOrEqual("100000000002", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("100000000001", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("100000000002", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.GreaterOrEqual("100000000001", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.GreaterOrEqual("100000000001", "100000000002"));
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("999999999999999999999999", "999"), "998999999999999999999999001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("-999999999999999999999999", "-999"), "998999999999999999999999001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("999999999999999999999999", "-999"), "-998999999999999999999999001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("-999999999999999999999999", "999"), "-998999999999999999999999001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("10000000000000100000000001", "500"), "5000000000000050000000000500");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Multiply("9999999239994399999991239999999", "888834888882318888543888888"), "8888348213303695859491006407241101393874673214452576111112");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("-1", "-1"), "-1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("1", "-1"), "1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("1", "-2"), "1");
            SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.NumberTestHelper.FromString("1"), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_IsFloat();
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_IsInteger();
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_IsFraction();
            }));
        },
        LongIntOperationsTest: function ()
        {
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.FromString("123456789123456789123456789"), "123456789123456789123456789");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.FromString("-123456789123456789123456789"), "-123456789123456789123456789");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.FromString("100000000000000000000000009"), "100000000000000000000000009");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.FromString("0"), "0");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.FromString("-0"), "0");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("9999", "1"), "10000");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("9999", "9999"), "19998");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("999999999", "999999999"), "1999999998");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("1000000010000000000", "999999999999999999"), "2000000009999999999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("123123123123", "231231231231"), "354354354354");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("123123123123", "231231231231123456"), "231231354354246579");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("231231231231123456", "123123123123"), "231231354354246579");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("123456789123456789123456789", "123456789123456789123456789"), "246913578246913578246913578");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("123456789123456789123456789", "123456789123456789123456789"), "0");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("123456789123456789123456789", "123456789123456789123456788"), "1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("123456789123456789123456789123456789123456789", "123456789123456789023456789123456789123456788"), "100000000000000000000000001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("234567892345678923456789", "123456781234567812345678"), "111111111111111111111111");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("100000000000000000", "99999999999999999"), "1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("19999999999999999900000000000000000", "9999999999999999999999999999999999"), "9999999999999999900000000000000001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("123456789123456789123456789", "-123456789123456789123456789"), "0");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("123456789123456789123456789", "-123456789123456789123456788"), "1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("123456789123456789123456789123456789123456789", "-123456789123456789023456789123456789123456788"), "100000000000000000000000001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("234567892345678923456789", "-123456781234567812345678"), "111111111111111111111111");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("100000000000000000", "-99999999999999999"), "1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("19999999999999999900000000000000000", "-9999999999999999999999999999999999"), "9999999999999999900000000000000001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("9999", "-1"), "10000");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("9999", "-9999"), "19998");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("999999999", "-999999999"), "1999999998");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("1000000010000000000", "-999999999999999999"), "2000000009999999999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("123123123123", "-231231231231"), "354354354354");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("123123123123", "-231231231231123456"), "231231354354246579");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("231231231231123456", "-123123123123"), "231231354354246579");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("123456789123456789123456789", "-123456789123456789123456789"), "246913578246913578246913578");
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("-1", "1"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("-1", "1"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("1", "-1"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("-1", "1"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("-1", "0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("-1", "0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("1", "0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("1", "0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("0", "-1"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("0", "-1"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("0", "1"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("0", "1"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("0", "0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("0", "0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.GreaterOrEqual("0", "0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.LessOrEqual("0", "0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Equal("0", "0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("100", "1000000000000000000000001"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("-100", "-1000000000000000000000001"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Equal("1000000000000000000001", "1000000000000000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Equal("1000000000000000000001", "1000000000000000000000"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.NotEqual("1000000000000000000001", "1000000000000000000000"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.NotEqual("1000000000000000000001", "1000000000000000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("1000000000000000000001", "1000000000000000000001"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("1000000000000000000001", "1000000000000000000002"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.LessOrEqual("1000000000000000000001", "1000000000000000000002"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.LessOrEqual("1000000000000000000002", "1000000000000000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("1000000000000000000001", "1000000000000000000001"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("1000000000000000000002", "1000000000000000000001"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.GreaterOrEqual("1000000000000000000001", "1000000000000000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.GreaterOrEqual("1000000000000000000001", "1000000000000000000002"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("100000000000000000", "99999999999999999"));
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("0", "1"), "-1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("-1", "0"), "-1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("-1", "-10000000000000"), "-10000000000001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Add("-10000000000000", "-1"), "-10000000000001");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("0", "999999999999999999999"), "-999999999999999999999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("1", "999999999999999999999"), "-999999999999999999998");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("-1", "999999999999999999999"), "-1000000000000000000000");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("1000000000000000000000000000", "999999999999999999999999999999999999999999"), "-999999999999998999999999999999999999999999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("-1000000000000000000000000000", "999999999999999999999999999999999999999999"), "-1000000000000000999999999999999999999999999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("-999999999", "999999999"), "-1999999998");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Subtract("-999999999", "-999999999"), "0");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("117", "9"), "13");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("-117", "-9"), "13");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("-117", "9"), "-13");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("117", "-9"), "-13");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("99999", "3"), "33333");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("99999999999999999999999999999", "3"), "33333333333333333333333333333");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("888848888848888488884888888", "2"), "444424444424444244442444444");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("1000002", "3"), "333334");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("100000000000000000000000002", "3"), "33333333333333333333333334");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("1234840820348902398409233209380984", "1234840820348902398409233209380984"), "1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.IntDivide("10000000", "1009999"), "9");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("10000000", "1009999"), "10000000/1009999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.IntDivide("100000000000", "1009999"), "99009");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("100000000000", "1009999"), "100000000000/1009999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.IntDivide("1000000000000000000000000", "1009999"), "990099990198010097");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("1000000000000000000000000", "1009999"), "1000000000000000000000000/1009999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("8888348213303695859491006407241101393874673214452576111112", "888834888882318888543888888"), "9999999239994399999991239999999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("300000", "30"), "10000");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.IntDivide("1341046897309863686", "1697420285"), "790050000");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("1341046897309863686", "1697420285"), "1341046897309863686/1697420285");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.IntDivide("450436426101345047", "1073592397"), "419560000");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("450436426101345047", "1073592397"), "450436426101345047/1073592397");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("2", "50"), "1125899906842624");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("-2", "3"), "-8");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("-2", "4"), "16");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("-2", "5"), "-32");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("-2", "6"), "64");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Power("132124324", "15"), "65274217536749135507709536991541526352990992087301082499764789926799099562303792713876561988745245818772486712415039258624");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Power("2", "-1"), "1/2");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Power("2", "-50"), "1/1125899906842624");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Power("-2", "-3"), "-1/8");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Power("-2", "-4"), "1/16");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Power("-2", "-5"), "-1/32");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Power("-2", "-6"), "1/64");
        },
        RandomLongDivision: function ()
        {
            var rnd = new System.Random.ctor();
            for (var i = 0; i < 100; i++)
            {
                SharpAlg.Tests.NumberTests.RandomLongDivisionCore(rnd, 0, 2147483647, 2147483647);
                SharpAlg.Tests.NumberTests.RandomLongDivisionCore(rnd, 2147483647, 2147483647, 2147483647);
                SharpAlg.Tests.NumberTests.RandomLongDivisionCore(rnd, 2147483647, 2147483647, 10000);
                SharpAlg.Tests.NumberTests.RandomLongDivisionCore(rnd, 2147483647, 2147483647, 10);
            }
        },
        FloatIntOperationsTest: function ()
        {
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Add("1.0", "2"), "3");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Add("1", "2.0"), "3");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Add("1", "2.3"), "3.3");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Multiply("-1", "13.0"), "-13");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Multiply("-9", "13.0"), "-117");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Multiply("9", "13.0"), "117");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Multiply("9.0", "13"), "117");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Subtract("9", "13.0"), "-4");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Subtract("9.0", "13"), "-4");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Divide("3", "2.0"), "1.5");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Divide("3.0", "2"), "1.5");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Divide("4.0", "2"), "2");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Power("117", "5.0"), "21924480357");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber(SharpAlg.Tests.NumberTestHelper.Power("117.0", "5"), "21924480357");
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Equal("100000000001", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Equal("100000000001.0", "100000000000"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.NotEqual("100000000001", "100000000000.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.NotEqual("100000000001.0", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("100000000001", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Less("100000000001.0", "100000000002"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.LessOrEqual("100000000001", "100000000002.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.LessOrEqual("100000000002.0", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("100000000001", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.Greater("100000000002.0", "100000000001"));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean(SharpAlg.Tests.NumberTestHelper.GreaterOrEqual("100000000001", "100000000001.0"));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean(SharpAlg.Tests.NumberTestHelper.GreaterOrEqual("100000000001.0", "100000000002"));
            SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.NumberTestHelper.Divide("1", "2"), $CreateAnonymousDelegate(this, function (x)
            {
                return SharpAlg.Native.Number.op_Equality(x, SharpAlg.Tests.NumberTestHelper.FromString("0.5"));
            }));
            SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.NumberTestHelper.FromString("1.0"), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_IsFloat();
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_IsInteger();
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_IsFraction();
            }));
        },
        FractionTest: function ()
        {
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("1", "2"), "1/2");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("-9", "117"), "-1/13");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("1234840820348902398409233209380984", "1234840820348902398409233209380985"), "1234840820348902398409233209380984/1234840820348902398409233209380985");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("1234840820348902398409233209380984", "1234840821348902398409233209380984"), "154355102543612799801154151172623/154355102668612799801154151172623");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("1000000", "1009999"), "1000000/1009999");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber(SharpAlg.Tests.NumberTestHelper.Divide("4", "2"), "2");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("5", "3"), "5/3");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("5", "-3"), "-5/3");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("-5", "3"), "-5/3");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("-5", "-3"), "5/3");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("6", "4"), "3/2");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber(SharpAlg.Tests.NumberTestHelper.Divide("8", "30"), "4/15");
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean((SharpAlg.Native.Number.op_LessThan(SharpAlg.Tests.NumberTestHelper.FromString("2"), SharpAlg.Tests.NumberTestHelper.Divide("5", "2"))));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean((SharpAlg.Native.Number.op_GreaterThan(SharpAlg.Tests.NumberTestHelper.FromString("2"), SharpAlg.Tests.NumberTestHelper.Divide("5", "2"))));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean((SharpAlg.Native.Number.op_GreaterThan(SharpAlg.Tests.NumberTestHelper.Divide("3", "4"), SharpAlg.Tests.NumberTestHelper.Divide("2", "3"))));
            SharpAlg.Tests.FluentAssert.IsFalse$$Boolean((SharpAlg.Native.Number.op_LessThan(SharpAlg.Tests.NumberTestHelper.Divide("3", "4"), SharpAlg.Tests.NumberTestHelper.Divide("2", "3"))));
            SharpAlg.Tests.FluentAssert.IsTrue$$Boolean((SharpAlg.Native.Number.op_Equality(SharpAlg.Tests.NumberTestHelper.Divide("3", "4"), SharpAlg.Tests.NumberTestHelper.Divide("3", "4"))));
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_Addition(SharpAlg.Tests.NumberTestHelper.Divide("1", "3"), SharpAlg.Tests.NumberTestHelper.Divide("1", "2"))), "5/6");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber((SharpAlg.Native.Number.op_Addition(SharpAlg.Tests.NumberTestHelper.Divide("1", "2"), SharpAlg.Tests.NumberTestHelper.Divide("1", "2"))), "1");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_Addition(SharpAlg.Tests.NumberTestHelper.Divide("4", "3"), SharpAlg.Tests.NumberTestHelper.Divide("7", "2"))), "29/6");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_Addition(SharpAlg.Tests.NumberTestHelper.Divide("1", "4"), SharpAlg.Tests.NumberTestHelper.Divide("1", "4"))), "1/2");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_Subtraction(SharpAlg.Tests.NumberTestHelper.Divide("1", "3"), SharpAlg.Tests.NumberTestHelper.Divide("1", "2"))), "-1/6");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_Multiply(SharpAlg.Tests.NumberTestHelper.Divide("2", "3"), SharpAlg.Tests.NumberTestHelper.Divide("-7", "9"))), "-14/27");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber((SharpAlg.Native.Number.op_Multiply(SharpAlg.Tests.NumberTestHelper.Divide("2", "3"), SharpAlg.Tests.NumberTestHelper.Divide("-3", "2"))), "-1");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_Division(SharpAlg.Tests.NumberTestHelper.Divide("2", "3"), SharpAlg.Tests.NumberTestHelper.Divide("-7", "9"))), "-6/7");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber((SharpAlg.Native.Number.op_Division(SharpAlg.Tests.NumberTestHelper.Divide("2", "3"), SharpAlg.Tests.NumberTestHelper.Divide("-2", "3"))), "-1");
            SharpAlg.Tests.ExprTestHelper.IsFloatEqual$1(SharpAlg.Native.Number.ctor, (SharpAlg.Native.Number.op_ExclusiveOr(SharpAlg.Tests.NumberTestHelper.FromString("2"), SharpAlg.Tests.NumberTestHelper.Divide("1", "2"))), $CreateAnonymousDelegate(this, function (x)
            {
                return x;
            }), "1.414213562");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber((SharpAlg.Native.Number.op_ExclusiveOr(SharpAlg.Tests.NumberTestHelper.FromString("1"), SharpAlg.Tests.NumberTestHelper.Divide("1", "2"))), "1");
            SharpAlg.Tests.NumberTestHelper.AssertIntegerNumber((SharpAlg.Native.Number.op_ExclusiveOr(SharpAlg.Tests.NumberTestHelper.FromString("1"), SharpAlg.Tests.NumberTestHelper.Divide("5", "6"))), "1");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_ExclusiveOr(SharpAlg.Tests.NumberTestHelper.Divide("2", "3"), SharpAlg.Tests.NumberTestHelper.FromString("5"))), "32/243");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_ExclusiveOr(SharpAlg.Tests.NumberTestHelper.Divide("2", "3"), SharpAlg.Tests.NumberTestHelper.FromString("-5"))), "243/32");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_ExclusiveOr(SharpAlg.Tests.NumberTestHelper.Divide("2", "3"), SharpAlg.Tests.NumberTestHelper.FromString("1"))), "2/3");
            SharpAlg.Tests.NumberTestHelper.AssertFractionNumber((SharpAlg.Native.Number.op_ExclusiveOr(SharpAlg.Tests.NumberTestHelper.Divide("2", "3"), SharpAlg.Tests.NumberTestHelper.FromString("-1"))), "3/2");
            SharpAlg.Tests.NumberTestHelper.AssertFloatNumber((SharpAlg.Native.Number.op_ExclusiveOr(SharpAlg.Tests.NumberTestHelper.FromString("4"), SharpAlg.Tests.NumberTestHelper.Divide("1", "2"))), "2");
            SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.FluentAssert.IsFalse$1$$TInput$$Func$2(SharpAlg.Native.Number.ctor, SharpAlg.Tests.NumberTestHelper.Divide("1", "2"), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_IsFloat();
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_IsInteger();
            })), $CreateAnonymousDelegate(this, function (x)
            {
                return x.get_IsFraction();
            }));
        }
    }
};
JsTypes.push(SharpAlg$Tests$NumberTests);
var SharpAlg$Tests$NumberTestHelper =
{
    fullname: "SharpAlg.Tests.NumberTestHelper",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        AssertFractionNumber: function (n, expected)
        {
            return SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Number.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Number.ctor, n, function (x)
            {
                return x.toString();
            }, expected), function (x)
            {
                return x.GetType().get_Name();
            }, "FractionNumber");
        },
        AssertFloatNumber: function (n, expected)
        {
            return SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Number.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Number.ctor, n, function (x)
            {
                return x.toString();
            }, expected), function (x)
            {
                return x.GetType().get_Name();
            }, "FloatNumber");
        },
        AssertIntegerNumber: function (n, expected)
        {
            return SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Number.ctor, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Number.ctor, n, function (x)
            {
                return x.toString();
            }, expected), function (x)
            {
                return x.GetType().get_Name();
            }, "LongIntegerNumber");
        },
        Add: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_Addition(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        Subtract: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_Subtraction(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        Multiply: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_Multiply(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        Divide: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_Division(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        IntDivide: function (s1, s2)
        {
            return (Cast(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Native.Numbers.LongIntegerNumber.ctor)).IntDivide((Cast(SharpAlg.Tests.NumberTestHelper.FromString(s2), SharpAlg.Native.Numbers.LongIntegerNumber.ctor)));
        },
        Power: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_ExclusiveOr(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        Equal: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_Equality(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        NotEqual: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_Inequality(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        Less: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_LessThan(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        LessOrEqual: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_LessThanOrEqual(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        Greater: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_GreaterThan(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        GreaterOrEqual: function (s1, s2)
        {
            return SharpAlg.Native.Number.op_GreaterThanOrEqual(SharpAlg.Tests.NumberTestHelper.FromString(s1), SharpAlg.Tests.NumberTestHelper.FromString(s2));
        },
        FromString: function (s)
        {
            return s.Contains(".") ? SharpAlg.Native.NumberFactory.FromString(s) : SharpAlg.Native.NumberFactory.FromIntString(s);
        }
    },
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Tests$NumberTestHelper);
var SharpAlg$Tests$ParserTests =
{
    fullname: "SharpAlg.Tests.ParserTests",
    baseTypeName: "System.Object",
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        ParseNumericTest: function ()
        {
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("1"), 1, SharpAlg.Native.Expr.One, null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("9 + 13"), 22, SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Tests.ExprTestHelper.AsConstant(13)), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("9 + 13 + 117"), 139, SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(9), SharpAlg.Tests.ExprTestHelper.AsConstant(13)), SharpAlg.Tests.ExprTestHelper.AsConstant(117)), null);
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(this.Parse("+"), SharpAlg.Tests.ParserTestHelper.GetNumberExpectedMessage(1));
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(this.Parse("9+"), SharpAlg.Tests.ParserTestHelper.GetNumberExpectedMessage(3));
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(this.Parse("9 + "), SharpAlg.Tests.ParserTestHelper.GetNumberExpectedMessage(5));
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("13 - 9"), 4, SharpAlg.Native.Expr.Subtract(SharpAlg.Tests.ExprTestHelper.AsConstant(13), SharpAlg.Tests.ExprTestHelper.AsConstant(9)), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("130 - 9 - 2"), 119, SharpAlg.Native.Expr.Subtract(SharpAlg.Native.Expr.Subtract(SharpAlg.Tests.ExprTestHelper.AsConstant(130), SharpAlg.Tests.ExprTestHelper.AsConstant(9)), SharpAlg.Tests.ExprTestHelper.AsConstant(2)), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("130 - 9 + 12 - 4"), 129, SharpAlg.Native.Expr.Subtract(SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Native.Expr.Subtract(SharpAlg.Tests.ExprTestHelper.AsConstant(130), SharpAlg.Tests.ExprTestHelper.AsConstant(9)), SharpAlg.Tests.ExprTestHelper.AsConstant(12)), SharpAlg.Tests.ExprTestHelper.AsConstant(4)), null);
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(this.Parse("13 -"), SharpAlg.Tests.ParserTestHelper.GetNumberExpectedMessage(5));
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("2 * 3"), 6, SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(2), SharpAlg.Tests.ExprTestHelper.AsConstant(3)), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("6 / 2"), 3, SharpAlg.Native.Expr.Divide(SharpAlg.Tests.ExprTestHelper.AsConstant(6), SharpAlg.Tests.ExprTestHelper.AsConstant(2)), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("2 ^ 3"), 8, SharpAlg.Native.Expr.Power(SharpAlg.Tests.ExprTestHelper.AsConstant(2), SharpAlg.Tests.ExprTestHelper.AsConstant(3)), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse(".234"), 0.234, SharpAlg.Tests.ExprTestHelper.AsConstant(0.234), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("0.234"), 0.234, SharpAlg.Tests.ExprTestHelper.AsConstant(0.234), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("-0.234"), -0.234, null, null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("-.234"), -0.234, null, null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("-x * 2"), null , SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.MinusOne, SharpAlg.Tests.ParserTestHelper.ParseNoConvolution("x * 2")), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("-x ^ 2"), null , SharpAlg.Native.Expr.Minus(SharpAlg.Native.ExpressionExtensions.Parse("x ^ 2", null)), null);
        },
        TODO: function ()
        {
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(-x) ^ 2", null), "x ^ 2");
            SharpAlg.Tests.ExprTestHelper.AssertSimpleStringRepresentation(SharpAlg.Native.ExpressionExtensions.Parse("(-x) ^ 3", null), "-x ^ 3");
        },
        OperationsPriorityTest: function ()
        {
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("1 + 2 * 3"), 7, SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Native.Expr.One, SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(2), SharpAlg.Tests.ExprTestHelper.AsConstant(3))), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("1 + 6 / 2"), 4, SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Native.Expr.One, SharpAlg.Native.Expr.Divide(SharpAlg.Tests.ExprTestHelper.AsConstant(6), SharpAlg.Tests.ExprTestHelper.AsConstant(2))), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("2 * 3 * 4 / 6 / 2 - 4 / 2"), 0, null, null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("2 * 2 ^ 3"), 16, SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(2), SharpAlg.Native.Expr.Power(SharpAlg.Tests.ExprTestHelper.AsConstant(2), SharpAlg.Tests.ExprTestHelper.AsConstant(3))), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("2 + 2 ^ 3"), 10, SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Tests.ExprTestHelper.AsConstant(2), SharpAlg.Native.Expr.Power(SharpAlg.Tests.ExprTestHelper.AsConstant(2), SharpAlg.Tests.ExprTestHelper.AsConstant(3))), null);
        },
        FunctionTest: function ()
        {
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("ln(1)"), null , SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Native.Expr.One), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("ln(x ^ 2 + y * z)"), null , SharpAlg.Native.Expr.Function$$String$$Expr("ln", SharpAlg.Native.ExpressionExtensions.Parse("x ^ 2 + y * z", null)), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("ln()"), null , SharpAlg.Native.Expr.Function$$String$$IEnumerable$1$Expr("ln", []), null);
        },
        FunctionMultiArgsTest: function ()
        {
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("someFunc(x, 2, y + x)"), null , SharpAlg.Native.Expr.Function$$String$$IEnumerable$1$Expr("someFunc", [SharpAlg.Native.ExpressionExtensions.Parse("x", null), SharpAlg.Native.ExpressionExtensions.Parse("2", null), SharpAlg.Native.ExpressionExtensions.Parse("y + x", null)]), null);
        },
        FactorialTest: function ()
        {
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("x!"), null , SharpAlg.Native.FunctionFactory.Factorial(SharpAlg.Native.Expr.Parameter("x")), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("x ^ y!"), null , SharpAlg.Native.Expr.Power(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.FunctionFactory.Factorial(SharpAlg.Native.Expr.Parameter("y"))), null);
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(this.Parse("!x"), SharpAlg.Tests.ParserTestHelper.GetNumberExpectedMessage(1));
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("3!"), 6, SharpAlg.Native.FunctionFactory.Factorial(SharpAlg.Tests.ExprTestHelper.AsConstant(3)), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("2 ^ 3!"), 64, null, null);
        },
        ParenthesesTest: function ()
        {
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("(1 + 2) * 3"), 9, SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Native.Expr.One, SharpAlg.Tests.ExprTestHelper.AsConstant(2)), SharpAlg.Tests.ExprTestHelper.AsConstant(3)), null);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("(2 + 4) / (4 / (1 + 1))"), 3, null, null);
        },
        ExpressionsWithParameterTest: function ()
        {
            var context = SharpAlg.Native.ContextFactory.CreateEmpty().Register$$String$$Expr("x", SharpAlg.Tests.ExprTestHelper.AsConstant(9)).Register$$String$$Expr("someName", SharpAlg.Tests.ExprTestHelper.AsConstant(13));
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("x"), 9, SharpAlg.Native.Expr.Parameter("x"), context);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("x * someName"), 117, SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Native.Expr.Parameter("someName")), context);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("(x - 4) * (someName + x)"), 110, null , context);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("-x"), -9, SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Parameter("x")), context);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("-9"), -9, SharpAlg.Native.Expr.Minus(SharpAlg.Tests.ExprTestHelper.AsConstant(9)), context);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("-(x + 1)"), -10, SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Add$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Tests.ExprTestHelper.AsConstant(1))), context);
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("-(x * 2)"), -18, SharpAlg.Native.Expr.Minus(SharpAlg.Native.Expr.Multiply$$Expr$$Expr(SharpAlg.Native.Expr.Parameter("x"), SharpAlg.Tests.ExprTestHelper.AsConstant(2))), context);
            SharpAlg.Tests.ParserTestHelper.AssertSingleSyntaxError(this.Parse("--(x + 1)"), SharpAlg.Tests.ParserTestHelper.GetNumberExpectedMessage(2));
            SharpAlg.Tests.ParserTestHelper.AssertValue(this.Parse("-(-(x + 1))"), 10, null , context);
        },
        Parse: function (expression)
        {
            return SharpAlg.Tests.ParserTestHelper.ParseNoConvolutionCore(expression);
        }
    }
};
JsTypes.push(SharpAlg$Tests$ParserTests);
var SharpAlg$Tests$ParserTestHelper =
{
    fullname: "SharpAlg.Tests.ParserTestHelper",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        AssertValue: function (parser, value, expectedExpr, context)
        {
            return SharpAlg.Tests.FluentAssert.IsTrue$1$$TInput$$Func$2(SharpAlg.Native.Parser.Parser, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Parser.Parser, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Parser.Parser, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Parser.Parser, parser, function (x)
            {
                return x.errors.get_Errors();
            }, System.String.Empty), function (x)
            {
                return x.errors.Count;
            }, 0), function (x)
            {
                return value != null ? SharpAlg.Native.ExpressionExtensions.Evaluate(x.Expr, context) : null;
            }, value != null ? SharpAlg.Tests.ExprTestHelper.AsNumber$$Double(value.get_Value()) : null), function (x)
            {
                return expectedExpr == null || SharpAlg.Native.ImplementationExpressionExtensions.ExprEquals(x.Expr, expectedExpr);
            });
        },
        AssertSingleSyntaxError: function (parser, text)
        {
            return SharpAlg.Tests.ParserTestHelper.AssertSyntaxErrors(parser, text, 1);
        },
        AssertSyntaxErrors: function (parser, text, errorCount)
        {
            return SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Parser.Parser, SharpAlg.Tests.FluentAssert.IsEqual$1$$TInput$$Func$2$$Object(SharpAlg.Native.Parser.Parser, parser, function (x)
            {
                return x.errors.Count;
            }, errorCount), function (x)
            {
                return x.errors.get_Errors();
            }, text);
        },
        ParseNoConvolution: function (expression)
        {
            return SharpAlg.Native.ExpressionExtensions.GetExpression(SharpAlg.Tests.ParserTestHelper.ParseNoConvolutionCore(expression));
        },
        ParseNoConvolutionCore: function (expression)
        {
            return SharpAlg.Native.ExpressionExtensions.ParseCore(expression, new SharpAlg.Native.Builder.TrivialExprBuilder(SharpAlg.Native.ContextFactory.Empty));
        },
        GetNumberExpectedMessage: function (column)
        {
            return SharpAlg.Native.Parser.ErrorsBase.GetErrorText(1, column, "invalid Terminal\r\n");
        }
    },
    assemblyName: "SharpAlg.Tests",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Tests$ParserTestHelper);
