<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using Numerics;
using System.Numerics;
using System.Collections.Generic;
//using ExprList = System.Collections.Immutable.ImmutableArray<SharpAlg.Geo.Core.Expr>;

<#GenStructure("SharpAlg.Geo.Core", "DivInfo", 
    new Field("Num", "Expr"), new Field("Den", "Expr"));#>
<#GenStructure("SharpAlg.Geo.Core", "PowerInfo", 
    new Field("Value", "Expr"), new Field("Power", "BigInteger"));#>
<#GenStructure("SharpAlg.Geo.Core", "ParamPowerInfo", 
    new Field("Param", "string"), new Field("Power", "BigInteger"));#>
<#GenStructure("SharpAlg.Geo.Core", "ParamPowerInfoListWithSqrt", 
    new Field("ParamPowerInfoList", "IEnumerable<ParamPowerInfo?>"), new Field("Sqrt", "Expr"));#>
<#GenStructure("SharpAlg.Geo.Core", "KoeffMultInfo", 
    new Field("Koeff", "BigRational"), new Field("Mult", "Expr"));#>

<#+
class Field {
    public readonly string Name, Type, HashCode; 
    public readonly new string Equals; 
    public Field(string name, string type, string equals = "Equals", string hashCode = "GetHashCode()") {
        this.Name = name;
        this.Type = type;
        this.Equals = equals;
        this.HashCode = hashCode;
    }
}
void GenStructure(string nameSpace, string name, params Field[] fields) {
#>
namespace <#=nameSpace#> {
    public struct <#=name#> {
        public static bool operator !=(<#=name#> left, <#=name#> right) {
            return !(left == right);
        }

        public static bool operator ==(<#=name#> left, <#=name#> right) {
            return 
<#+foreach(var field in fields.Take(fields.Length - 1)) {#>
                <#=fields.Last().Equals#>(left.<#=field.Name#>, right.<#=field.Name#>) &&
<#+}#>
                <#=fields.Last().Equals#>(left.<#=fields.Last().Name#>, right.<#=fields.Last().Name#>);
        }

<#+foreach(var field in fields) {#>
        public readonly <#=field.Type#> <#=field.Name#>;
<#+}#>

        public <#=name#>(<#+foreach(var field in fields.Take(fields.Length - 1)) {#><#=field.Type#> _<#=field.Name#>, <#+}#><#=fields.Last().Type#> _<#=fields.Last().Name#>) {
<#+foreach(var field in fields) {#>
            <#=field.Name#> = _<#=field.Name#>;
<#+}#>
        }

        public override bool Equals(object obj) {
            if (!(obj is <#=name#>))
                return false;
            return this == (<#=name#>)obj;
        }

        public override int GetHashCode() {
            return 
<#+foreach(var field in fields.Take(fields.Length - 1)) {#>
                <#=field.Name#>.<#=fields.Last().HashCode#> ^
<#+}#>
                <#=fields.Last().Name#>.<#=fields.Last().HashCode#>;

        }
    }
}
<#+
}
#>